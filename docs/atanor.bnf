####################################################################################################################################################
###	KiF BNF grammar ####
####################################################################################################################################################
####################################################################################################################################################
### BNF grammar formalism 
####################################################################################################################################################
#
# To compile the KiF BNF grammar, you need the following files:
#	- kif (the file that contains the grammar description of the KiF formalism)
#	- compilateurC.py (a Python program, the BNF compiler)
#	- rulen.py (the BNF grammar of the our BNF formalism)
#	- optimise.kif (some improvment over the generated code, it is a KiF program)
#
# You first execute the Python program: 'compilateurC.py' with the 'kif' file as input: python compilateurC.py ./kif
# N.B. This Python program also requires 'rulen.py'.
# which generates: kifn.h, kifn.cxx and x_nodes.h
#
# You can also call: 'optimise.kif', without any parameters, it will load the last generated 'kifn.cxx' as input.
# You can skip this step if you do not have access to kif at this stage. 
# It provides some additional performance improvment. 
# It then generates: kifn_o.cxx, which can replace kifn.cxx in your code.
#
####################################################################################################################################################
### Left-hand-side of the rules ###
# The system pre-tokenizes the code beforehand, thanks to loadtoken in x_nodes.h. 
# It automatically tokenizes along the following elements:
#	- Double quotes strings (type=1): "..."
#	- Single quotes strings (type=2): '...'
#	- Large strings (type=5):	@".."@
#	- Comments, which are removed from the input:
#		* line comments:	//....
#		* large comments:	/@....@/
#	- Numbers (type=3, with exponential 'e' and decimal point)
#	- Tokens (type=4): a sequence of unicode characters, which are not punctuations or spaces, to the exception of "_". '_protégée' is a valid token for instance.
#	- Punctuations (type=0)
#
# You need to use some specific meta-characters to tell the system to use these pre-defined tokens instead of their rule description.
# You still need to declare these rules, even though their description won't be taken into account. 
# The BNF compiler will associate these rules with specific C++ methods, which will be based on the internal code chosen within loadtoken
#
# These meta-characters should be placed as the first character in the rule. 
# Their interpretation is the following: <,>,^,=,& ,~
#		< : double quote string		(type in loadtoken is: 1)
#		> : simple quote string		(type in loadtoken is: 2)
#		~ : large strings @".."@	(type in loadtoken is: 5)
#		= : digits or number		(type in loadtoken is: 3)
#		^ : token					(type in loadtoken is: 4)
#		& : punctuation				(type in loadtoken is: 0)
#
# The following meta-characters have a different interpretation, they are used to control how the parsing should take place:
#		+: defines the entry point of the grammar, in other words, which rule to use in order to start parsing the code.
#		!: you use this meta-character to avoid the matching strings to be part of the final analysis tree
#		%: you use this meta-characte to avoid storing substrings within the analysis tree (reducing the storage to only salient strings)
#
#
####################################################################################################################################################
### Right-hand-side of the rules ###
# You can use the following operators in the right-hand side of a rule:
#
# Character or Strings Operators:
#	%x		: The '%' operator is used to introduce the character 'x'
#	$xxx	: The '$' operator is used to introduce the string 'xxx''
#	\ddd	: Defines a character through its unicode code.
#	X-x		: The '-' operator defines a range of characters.
#
# Operators:
#	:=		:	This operator associates a rule name with its description.
#	' '		:	The space character defines a conjunction of rule elements.
#	^		:	This operator is an exclusive disjunction, it stops at the first target that matches.
#	|		:	This operator is also a disjunction, but in this case it selects the longest match between each rule element.
#	[..]	:	This operator defines a sub-sequence of tokens. DO NOT PUT ANY SPACE BETWEEN '[' and the following element or between the last element and ']'.
#	(..)	:	This operator defines an optional sequence of tokens. DO NOT PUT ANY SPACE BETWEEN '(' and the following element or between the last element and ')'.
#	{..}	:	This operator defines a context at the end of rule, to constrain the rule execution. The context content is not appended to the current analysis tree.
#
# Kleene Operators:
# Important: These operators are compiled into 'while' loops in C++, not recursive calls...
#	r*		:	The element 'r' should be present 0 or n times. 'r' is a rule element, it can be a sequence of elements: [..]*
#	r+		:	The element 'r' should be present at least once. 'r' is a rule element, it can be a sequence of elements: [..]+
#
# Cut Operator:
#	*n = error message : Defines an error message of numerical index 'n'. These error messages must be defined at the beginning of the file.
#	;d		:	Introduces a 'point of no return' associated with a message (see above), it is the last point beyond which you cannot backtrack.
#				When a "point of no return" is reached, then if there is an error later on in the code, the system will stop and returns the last error message
#				of index 'd'.
#			
#
# It is also possible to generate some BNF rules, whose contents can be modified on the fly programmatically. 
# Basically, the system generates some C++ code out of the BNF rules, which is based on some variable content instead of characters or strings.
#
#	@x		:	'@' creates a "character" variable in the C++ code, whose initial value will be the character 'x'. 
#				A Y_val_d (char) will be then created in the C++ class, 'd' is a digit corresponding to the order in which these variables were created.
#
#	:VARI	:	':' creates a "string" variable in the C++ code, whose initial value is the string VARI.
#				A VS_var_d (string) will then be created in the c++ class, 'd' is a digit corresponding to the order in which these variables were created.
#
# It is then possible to alter the behaviour of these BNF rules in the parser by simply modifying the initial value of these variables.
#
#
####################################################################################################################################################
####################################################################################################################################################
####################################################################################################################################################
### Error message strings, each message is introduced with '*' followed with its number index. 
### Last error message beyond which you cannot backtrack, it is declared in a rule with ';' followed by the corresponding index number.
####################################################################################################################################################
*1 = Wrong index format
*2 = Wrong expression after an operator
*3 = Wrong list of parameters
*4 = Wrong expressions in parentheses
*5 = Wrong FRAME declaration
*6 = Wrong argument declaration
*7 = Wrong FUNCTION declaration
*8 = Wrong BOOLEAN EXPRESSION
*9 = Wrong BOOLEAN expression
*10 = Wrong IF declaration
*11 = Wrong WHILE declaration
*12 = Wrong FOR declaration
*13 = Wrong FUNCTION CALL
*14 = Wrong Expression
*15 = Wrong Instruction
*16 = Wrong SWITCH
*17 = Wrong test in a SWITCH
*18 = Wrong IN or ON expression
*19 = Wrong WITH expression
*20 = Wrong PREDICATE declaration
*21 = Wrong PATTERN in A RULE
*22 = Wrong TRY-CATCH expression
*23 = Wrong INTERVAL
*24 = Wrong ELSE section
*25 = Wrong VECTOR definition
*26 = Wrong MAP definition
*27 = Wrong Function call in an index reference
*28 = Wrong comments
*29 = Wrong dotted expression
*30 = Wrong expression or Missing ';'
*31 = Missing '}'
*32 = Wrong declaration
*33 = Wrong FOR IN declaration
*34 = Wrong PREDICATE definition
*35 = Wrong PREDICATE expression
*36 = Wrong PREDICATE parameter list
*37 = Wrong PREDICATE term
*38 = Wrong tuple
*39 = Wrong ASSERT definition
*40 = Wrong PREDICATE VARIABLE
*41 = Wrong RANGE definition
*42 = Wrong LISP expression
*43 = Wrong TAG expression
*44 = Wrong DCG declaration
*45 = Wrong DCG or Missing '.'
*46 = Wrong Predicate Rule or Missing '.'
*47 = Wrong LAMBDA use
*48 = Wrong FUNCTIONAL description
*49 = Wrong FILTER
*50 = Wrong FOLD or SCAN
*51 = Wrong MAP
*52 = Wrong CYCLE or REPEAT
*53 = Wrong REPLICATE
*54 = Wrong Haskell LAMBDA
*55 = Wrong Haskell CASE
*56 = Wrong Haskell Boolean Use
*57 = Wrong FLIP
*58 = Wrong EXTENSION implementation
*59 = Expecting a meta-character
*60 = Expecting a '.'
*61 = Wrong tuple definition
####################################################################################################################################################
####################################################################################################################################################
### This is the entry point of our parser: analyse, hence the "+" ######
+analyse
####################################################################################################################################################
### The most basic structures ###

char := [A-Z|a-z|%_|%#]

#^ --> we use string tokens
^word := char [char^0-9]*
&punct := .

########### SHELL and LABELS ##############################################
path := %/ word (path)

#If you define a #!path, then you do not want to parse it in your kif program
!shell := %# %! [path^word]
!signature := \239 \187 \191

#### Used in debug mode ###
label := %# word

########### OPERATORS ##############################################

anydouble := [%\ .]^[~%"]
anysimple := ~%'

anycolon := [%% .]^[~%;]

operator := [%& %& %&]^[%: %:]^[%< %<]^[%> %>]^[%^ %^]^%&^%|^%+^%-^%*^%/^%%^%^

operatoraffectation := [%& %& %& %=]^[%: %: %=]^[%: %=]^[$is ($not)]^[%< %< %=]^[%> %> %=]^[%+ %=]^[%- %=]^[%* %=]^[%/ %=]^[%% %=]^[%& %=]^[%| %=]^[%^ %^ %=]^[%^ %=]^[%< %< %<]^%=

orand := [%| %|]^[%& %&]^$or^$and

comparator := [%~ %=]^[%! %=]^[%= %=]^[%< %=]^[%> %=]^[%$ %>]^[%$ %<]^%<^%>

%operation := operator expressions
%comparison := comparator nocomparisonexpressions

########### CURRENT DECLARATIONS ##############################################
### Some feature definitions for functions and variables ###
private := $private 
common := $common 
const := $const

feature := [private (common)]^[common^const]

^typename := char [char^0-9]*
type := (feature) typename

depend := $with ;19 word

%declaration := type word (%( parameters %)) (depend) (%= wnexpressions)

%declarationlist := word (%( parameters %)) (depend) (%= ;32 wnexpressions) (%, ;32 declarationlist)

%multideclaration := type word (%( parameters %)) (depend) (%= ;32 wnexpressions) (%, ;32 declarationlist)

declarationending := %;

%frame := (private) $frame ;5 typename (depend) [declarationending^instruction] 
%extension := $extension ;58 typename instruction

########### FUNCTIONS ##############################################
instruction := %{ ;15 (blocs) %}

nonlimited := %. %. %.

arguments := declaration (%, ;6 [nonlimited^arguments])

strict := $strict 
join := $joined

protecclusive := [$protected^$exclusive] 

functionsort := $polynomial^$function^$autorun^$thread

typefunction := (join) (protecclusive) (private) (strict) functionsort

indexname := %[ %]
intervalname := %[ %: %]
%function := typefunction ;7 [word^plusplus^operator^comparator^indexname^intervalname] %( (arguments) %) [declarationending^instruction] 

%subfunc := %. ;27 regularcall
%subfuncbis := %. regularcall
%subvar := %. ;29 variable

framesep := %: %:
frameup := word framesep
functioncall := (frameup) word
%regularcall := functioncall %(;13 (parameters) %) (interval^indexes^subfunc)
%purecall := functioncall %(;13 (parameters) %) (interval^indexes)

returncall := [$return^$_return]
breakcall := $break
continuecall := $continue

%call := breakcall^continuecall^regularcall^returncall

sep := %: 

%parameters := nocomparisonexpressions (%, ;3 parameters)

########### THE PARSER ##############################################
%sousbloc := [multideclaration^affectation^expressions]
%bloc :=  predicatefact^[dcg ;45 %.]^[predicatedefinition ;46 %.]^[sousbloc ;30 %;]
%complexbloc := switch^trycatch^loop^doloop^test^forin^for
%blocs := [label^extension^frame^complexbloc^function^bloc]+

### Our entry point ####
%analyse := (signature) (shell) blocs

########### VARIABLES ##############################################
variable := word (interval^indexes^subfuncbis^subvar)
allvariable := predicatevariable^variable

purevariable := word (interval^indexes)
predvariable := predicatevariable^purevariable

plusplus := [%+ %+]^[%- %-]
%affectation := [valmaptail^valvectortail^variable] [plusplus^[operatoraffectation;14 wnexpressions]]

%increment := variable plusplus

########### IN & ON ##############################################
%notin := $notin^[$not $in]^[$absent $from]
%in := $in
operatorin := notin^in
%operationin := operatorin ;18 expression
negation := %~^[$not]

########### TUPLES, VECTORS and MAPS ##############################################
minus := %- [astringdouble^afullstring^astringsimple^variable]
indexes := %[;1 [minus^expressions] %] (interval^indexes^subfunc)
interval := %[ ([minus^expressions]) sep;23 ([minus^expressions]) %] (interval^indexes^subfunc)

%valtuple := %( wnexpressions %,;61 (wnexpressions [%, wnexpressions]*) %)

%valvector := %[;25 (wnexpressions [%, wnexpressions]*) %]

%valtail := %| expression
%valvectortail := %[;25 (expression [%, expression]* (valtail)) %]

%maptail := %| variable
%dicoval := expression %: expression
%valmaptail := %{;26 (dicoval [%, dicoval]* (maptail)) %}

intentionsep := %. %.
step := %: wnexpressions
%intentionvector := %[ [[intentionsep ;25 wnexpressions]^[wnexpressions intentionsep ;25 (wnexpressions) (step)]] %]
%intentionwithdouble := %[ [[intentionsep ;25 wnexpressions %, wnexpressions]^[wnexpressions %, wnexpressions intentionsep ;25 (wnexpressions)]] %]

%intentionvect := intentionvector^intentionwithdouble

%dico := wnexpressions %: wnexpressions
%valmap := %{ ;26 (dico [%, dico]*) %}

########### JSON  ##################################################
%jvector := %[;25 (jexpression [%, jexpression]*) %]
%jdico := [abool^astringdouble^astringsimple^xnumber^anumber^afullstring] %: jexpression
%jmap := %{ ;26 (jdico [%, jdico]*) %}

%jexpression := abool^astringdouble^astringsimple^xnumber^anumber^afullstring^jvector^jmap

########### PREDICATE ##############################################

%cut := %!
%fail := $fail

%predicate := word (%< probaexpression %>) %( (predicateparameters) %)
%predicatecall := functioncall %( (predicateparameters) %)

probaexpression := localif^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^call^optional^predvariable

retractcommand := $retract^$retractdb
assertcommandbefore := $asserta
assertcommandafter := $assertz^$assert^$assertdb
assertweight := $ponder
%assertpredicate := [retractcommand^assertcommandbefore^assertcommandafter^assertweight] %( ;39 predicate (%, expression) %)

predicatevariable := %? ;40 word
term := %? word %(;37 (predicateparameters) %)
tuple := %( predicateparameters %)

#affectexpression is called for an affectation such as "is" or "="
%affectexpression := [anumber^pexpression] (operation^comparison^operationin)

%affectationpredicate := predvariable [plusplus^[operatoraffectation;14 affectexpression]]
%comparepredicate := predvariable [comparator;14 affectexpression]

#For predicate vectors...

%pintentionvector := %[ [[intentionsep ;25 pexpression]^[pexpression intentionsep ;25 (pexpression) (step)]] %]
%pintentionwithdouble := %[ [[intentionsep ;25 pexpression %, pexpression]^[pexpression %, pexpression intentionsep ;25 (pexpression)]] %]

%pintentionvect := pintentionvector^pintentionwithdouble

%merging := pexpression
%apredicatelist := pexpression ([%, ;25 apredicatelist]^[%| ;25 merging {%]}])
%valpredicatevector := %[ (apredicatelist) %]

%pexpression := term^tuple^predicatevariable^pintentionvect^valpredicatevector^valmappredicate^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^purecall^purevariable
%predicateparameters := pexpression (%, predicateparameters)

#For predicate map... The order is important for the unification
%mapmerging := pexpression
%mappredicatelist := predicatedico ([%, mappredicatelist]^[%| mapmerging])
%valmappredicate := %{ ;26 (mappredicatelist) %}
%predicatedico := pexpression %: pexpression

predicateoperator := %,^%;

dboperation := $get^$store^$remove
predicatedatabase := dboperation %( expression %)

%predicateexpression := [fail^cut^assertpredicate^[(negation) predicatecall]^affectationpredicate^comparepredicate^valpredicatevector^valmappredicate^expressions] (predicateoperator ;35 predicateexpression)
%predicatedefinition := predicate %: %- ;20 [abool^predicatedatabase^predicateexpression]
%predicatefact := predicate %.

dcgword := predicate^word
finaltoken := %[ ([predicatevariable^xnumber^astringdouble^astringsimple^anumber^astring] [%, [predicatevariable^xnumber^astringdouble^astringsimple^anumber^astring]]*) %]
finaldcg := %{ predicateexpression %}
%dcg := dcgword %- %- %> ;44 [[finaltoken^dcgword] [%, dcgword]*] (%, finaldcg)

########### HASKELL ##############################################

%haskelltail := [%|^%:] haskellexpression
%haskellexpression := haskellmap^haskellvector^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^word
%haskellvector := %[ (haskellexpression [%, haskellexpression]* (haskelltail)) %]

%haskellmaptail := %| variable
%haskellkeymap := abool^xnumber^astringdouble^afullstring^astringsimple^anumber^word
%haskelldico := haskellkeymap %: haskellexpression
%haskellmap := %{ (haskelldico [%, haskelldico]* (haskellmaptail)) %}

letkeyword := $let
%let := letkeyword [valmaptail^valvectortail^variable] %= hmetafunctions^nocomparisonexpressions
%letmin := variable %= [hmetafunctions^nocomparisonnorinexpressions]

%range := let^[[valmaptail^valvectortail^variable] %< %- hmetafunctions^nocomparisonexpressions]
%haskell := word %( [haskellmap^haskellvector^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^word] [%, [haskellmap^haskellvector^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^word]]* %) [%:^%=]

%otherwise := %| $otherwise %= expression
%guard := %| booleanexpression %= ;48 expression [otherwise^guard]

%hlambda := %\ ;54 [haskellmap^haskellvector^word] [haskellmap^haskellvector^word]* %- %> wnexpressions
%hboollambda := %\ ;54 [haskellmap^haskellvector^word] [haskellmap^haskellvector^word]* %- %> booleanexpression
%hfunction := word expression*

lfold := $foldl
rfold := $foldr
lscan := $scanl
rscan := $scanr

fold := lfold^rfold^rscan^lscan
%folding := fold ;50 %( [hlambda^hfunction^operator] %) expression [hcompose^hcomposecall^expression]

haskellbooloperator := $and^$or
lfold1 := $foldl1
rfold1 := $foldr1
lscan1 := $scanl1
rscan1 := $scanr1

fold1 := lfold1^rfold1^rscan1^lscan1
%folding1 := fold1 ;50 %( [hlambda^hfunction^operator] %) [hcompose^hcomposecall^expression]
filterkeyword := $takeWhile^$filter^$dropWhile
takekeyword := $take^$drop

%inverted := expression operator
%mapping := $map ;51 %( [hlambda^operation^inverted^hfunction^operator] %) [hcompose^hcomposecall^expression]
%filtering := filterkeyword ;49 %( [hboollambda^comparison^operationin^hfunction] %) [hcompose^hcomposecall^expression]
%haskellbooling := haskellbooloperator ;56 %( [hboollambda^comparison^operationin^hfunction] %) [hcompose^hcomposecall^expression]

%taking := takekeyword ;49 expression [hcompose^hcomposecall^expression]

%zipping := $zipWith %( [hlambda^operator^hfunction] %) expression expression+
%pairing := $zip expression expression+

cycle := $repeat^$cycle
%cycling := cycle ;52 expression
%repeating := $replicate ;53 expression expression

%flipping := $flip ;57 %( [hlambda^operation^inverted^hfunction^operator] %) expression expression

%haskellcaseotherwise := $otherwise expression
%haskellresult := [valmaptail^valvectortail^expression] %- %> expression
%haskellcase := $case ;55 variable $of haskellresult [%, haskellresult]* (haskellcaseotherwise)

%hfunctioncall := [operator^word] [hcompose^hcomposecall^expression]+
hoperator := %,^%;
%hmetafunctions := folding^folding1^mapping^filtering^haskellbooling^taking^zipping^pairing^cycling^repeating^flipping
%hcompose := %. [mapping^filtering^haskellbooling^taking^zipping^pairing^folding^folding1^cycling^repeating^flipping]
%hcomposecall := %. hfunctioncall


hoper := [%& %& %&]^[%: %:]^[%< %<]^[%> %>]^[%^ %^]^%&^%+^%-^%*^%/^%%^%^
%hoperation := hoper hexpressions

%hexpression := haskellcase^localif^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^call^valtuple^optional^increment^allvariable^telque^intentionvect^valvector^valmap
%hexpressions := hexpression (hoperation)

%whereexpression := $where [(($let) word %=) nocomparisonexpressions %;]+
%hinexpression := $in nocomparisonexpressions

%telque := %< ;48 [(haskell) [hmetafunctions^guard^[$let letmin [[%,^%;] letmin]* hinexpression (%, whereexpression)]^[[hexpressions|hfunctioncall] ([%|^$where] [range [hoperator range]* (%, whereexpression^[booleanexpression (%, whereexpression)])]^whereexpression^booleanexpression)]]] %>

########### EXPRESSION DEFINITIONS ##############################################

%optional := %( ;4 wnexpressions %)
expression := (negation) [haskellcase^localif^abool^xnumber^astringdouble^afullstring^astringsimple^anumber^call^valtuple^optional^increment^allvariable^telque^intentionvect^valvector^valmap]
#wnexpressions is called at the beginning of an affectation, it has been implemented to take into account "-var"
%wnexpressions := [anumber^negated^expression] (operation^comparison^operationin)
# We do not want any comparison in the expression (as it might disrupt other parses, for instance we forbid two or more comparisons in a row)
%nocomparisonexpressions := [anumber^negated^expression] (operation^operationin)

# We also prevent here, the operator in to be used in an expression, to avoid confusion with "in" in Haskell
# If you need a "in" expression, then in that case it should be embedded into (..)
%nocomparisonnorinexpressions := [anumber^negated^expression] (operation)

%expressions := expression (operation^comparison^operationin)

numbers := expression (operation)

#< --> we use the doublestring map
<astringdouble := %" anydouble* %"
#> --> we use the simplestring map
>astringsimple := %' anysimple* %'
~afullstring := %@ %" .+ %" %@

#= --> we use numbers
negated := %- expression
=anumber := (%-) [0-9]+ (%. [0-9]+) 
xnumber := %0 %x [0-9^A-F^a-f]+
abool := $true^$false

########### BASIC INSTRUCTIONS ##############################################

blocfor := [affectation^expression] (%, blocfor)
%localif := $if %( ;10 booleanexpression %) expression ($else expression)
declarationfor := [variable $in]^[type variable $in]

%optionalboolean := %( booleanexpression %)
%booleanexpression := [optionalboolean|expressions] (orand ;8 [optionalboolean|booleanexpression])

%arange := %< ;41 wnexpressions %, wnexpressions %, wnexpressions %>

%test := $if %( ;10 booleanexpression %) [instruction^complexbloc^bloc] (testelif) ($else ;24 [instruction^complexbloc^bloc]) 
%testelif := $elif %( ;10 booleanexpression %) [instruction^complexbloc^bloc] (testelif) ($else ;24 [instruction^complexbloc^bloc]) 
%loop := $while %( ;11 booleanexpression %) [instruction^complexbloc^bloc] 
%doloop := $do [instruction^complexbloc^bloc] $while %( ;11 booleanexpression %) declarationending
%for := $for %( ;12 [multideclaration^blocfor] %; booleanexpression %; blocfor %) [instruction^complexbloc^bloc] 
%forin := $for %( [[[valmaptail^valvectortail] $in]^declarationfor] ;33 [arange^expressions] %) [instruction^complexbloc^bloc]
%switch := $switch %( ;16 expression %) (depend) %{ ;31 testswitch+ %} 
%trycatch := $try %{ ;22 blocs %} $catch ;22 (%( (word) %)) [%;^[%{ ;22 blocs %}]]
%testswitch := [default^xnumber^astringdouble^afullstring^astringsimple^anumber^abool] %: ;17 [instruction^complexbloc^bloc] 
default := $default 


########### PATTERNS FOR CERTAIN SPECIALIZED OBJECTS CALLED FROM WITHIN KIF INSTRUCTIONS ##############################################
^astring := char [char^0-9]*
lispexpression := xnumber^astringdouble^afullstring^astringsimple^anumber^astring^punct
lispexpressions := onelisp^lispexpression 
onelisp := @( lispexpressions ;42 lispexpressions* @)
lisp := onelisp onelisp*

tagexpression := xnumber^astringdouble^afullstring^astringsimple^anumber^astring^punct
tagexpressions := onetag^tagexpression 
onetag := :OPEN tagexpressions ;43 tagexpressions* :CLOSE
tag := onetag onetag*

########## Grammar pattern: tk :=  ... ############################
ameta := [%?^[%% ;59 [%d^%p^%c^%C^%a^%r^%s^%S^%?^%%]]] (%_)
amulti := %$ word
asimple := word
%atoken := (negation) subgram^ameta^xnumber^amulti^astringdouble^astringsimple^anumber^abool^word

%anitem := ameta^xnumber^amulti^astringdouble^astringsimple^anumber^abool^asimple

dj := %;

%aoptional := %( atoken %)
%aoptitem := %( anitem %)

akleene := %*^%+
%anelement := aoptional^[atoken (akleene)]
%anitemelement := aoptitem^[anitem (akleene)]

%body := anitemelement [[dj^%,] anitemelement]*

%rule := word %: %= anelement [[dj^%,] anelement]* ;60 %.
%subgram := %[ body (%| body)* %]

%rules := rule+
